# Introduction to Generic Programming in Go

Paul Bivrell
12 May 2021
Slack: @pbj

## What will you learn?

## Minimal Agenda

* Discuss what types of problems generics solves
* Explore the accepted proposal for generics in Go
* Run example code in a demo implementation

__My Goal__:

Make you excited for the Generics in Go

## What do you mean Generics in Go?

## Generics and Go

__Loose Definition__:

_Generics is a style of programming which allow programmers to write operations where the type of the data is defined by the user of the code rather than the writer._

__Issue__: This style of programming does not currently exist in Go

__Solution__:

On Feb 20, 2021 the [proposal](https://github.com/golang/go/issues/43651#issuecomment-782705489) to add generic programming to Go has been accepted.

 As early as 1.18 (Feb 2022) we could see generics in Go ðŸŽ‰




## The problem

## Assertion

In Go we can not write one block of code that works with different types

## List Search

.play intro-to-generics/searchstring.go 

## List Search (now with ints)

.play intro-to-generics/searchint.go

## Generic search?

But what about interface{}?

.play intro-to-generics/searchinterface.go 

## Static typing?

The previous code misses the mark for a good generic implementation because it subtraverts the purpose of static typing.

.play intro-to-generics/searchinterfacebad.go  /START OMIT/,/END OMIT/

The interface{} implementation returns an interface{} not a string. We required a type cast.

.play -edit intro-to-generics/searchinterfacefixed.go /START OMIT/,/END OMIT/

This method avoids all of the benifits and compile time safety we get from using a staticly typed language.

## Other alternatives

__Reflect [pkg](https://golang.org/pkg/reflect/)__

* Difficult to read and write
* Potentially slow

__Code generation__

* Complicates build process
* Undermines go tool chain
* Uncompilable Artifact
* Not standardized

## The (proposed) solution

## Copy example

Let's look at a very simple example. How can we use generics to write the following functions a single time.

.code intro-to-generics/copystring.go /START OMIT/,/END OMIT/

## Generic copy

.code -edit intro-to-generics/copygeneric.go /START OMIT/,/END OMIT/


__What's new here?__
* Type parameter list 
* Type constriant

Runnable [Link](https://go2goplay.golang.org/p/CbcKpfcRf0E)

## Making Search Generic

## Working Generic Search?

.code -edit intro-to-generics/searchgenericinvalid.go

Runnable [link](https://go2goplay.golang.org/p/LMcNNUX_lGh)

* This code does not work :(

## Comparable type constraint

Operator == does not work on __any__ type

__New Type Constraint:__

We need to change our type constriant from __any__ to a constraint that compares things

.code -edit intro-to-generics/searchgeneric.go  /START OMIT/,/END OMIT/

* __comparable__ like __any__ is a predefined type constraint. It matches any type that can be compared with == and !=

## Generic search

.code intro-to-generics/searchgeneric.go

Runnable [link](https://go2goplay.golang.org/p/g_JOUlzJ4k0). 

## Custom type constraints

## Max function

Let's reduce these max functions in to a single generic function

.code intro-to-generics/maxs.go /START OMIT/,/END OMIT/

## Generic Max

.code intro-to-generics/genericmaxbroken.go /START OMIT/,/END OMIT/

Runnable [link](https://go2goplay.golang.org/p/OMwYimIv-ea)

## Defining our own type constraint

Operator > does not wok on every type. We must define a type constraint 

.code intro-to-generics/genericmax.go /START OMIT/,/END OMIT/

Runnable [link](https://go2goplay.golang.org/p/n-cXKd-RUCJ)

Note that __any__ is just an alias for __interface{}__

## More type constraints

## Multiple type constraints

The type parameter list as it implies can take multiple values for a type parameter

.code intro-to-generics/multiple.go /START OMIT/,/END OMIT/

Runnable [link](https://go2goplay.golang.org/p/02nd1sCKzvU)

## Type constraints with methods

## Interfaces as Interfaces

We can't define operators on user defined types. We instead use methods on types. Unsurprisingly we can use the standard interface syntax to constrain a generic type.

.code intro-to-generics/sort.go /START OMIT/,/END OMIT/

Runnable [link](https://go2goplay.golang.org/p/E4AfKBBS4Tl)

## Closing Words

## Tip of the iceberg

* There is a lot more to explore in the [current generics proposal](https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md)

__Subject to Change__

* The implementation can [change](https://github.com/golang/go/issues/45346)

__So far so Good__

This generic implementation is relatively simple, solves problems with minimal additional complexity, and feels like Go.

## Resources

* [Generics Playground](https://go2goplay.golang.org/)
* [Accepted type parameter proposal](https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md)
* [Proposal discussion on github](https://github.com/golang/go/issues/43651)
* [GopherCon 2019 Generics Talk - Ian Lance Taylor](https://www.youtube.com/watch?v=WzgLqE-3IhY&t=296s)
* [GopherCon 2020 Generics Talk - Robert Griesemer](https://www.youtube.com/watch?v=TborQFPY2IM)
* [Indepth proposal review - Bill Kennedy](https://www.youtube.com/watch?v=gIEPspmbMHM)
